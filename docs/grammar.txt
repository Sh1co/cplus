Program : { SimpleDeclaration | RoutineDeclaration }

    SimpleDeclaration : VariableDeclaration | TypeDeclaration
        VariableDeclaration : var Identifier ':' Type [ is Expression ] | var Identifier is Expression
            Expression : Relation { ( and | or | xor ) Relation }
                Relation : Simple [ ( < | <= | > | >= | = | /= ) Simple ]
                    Simple : Factor { ( * | / | % ) Factor }
                        Factor : Summand { ( + | - ) Summand }
                            Summand : Primary | ( Expression )
                                Primary : IntegralLiteral | RealLiteral | true | false | ModifiablePrimary
                                    ModifiablePrimary : Identifier { . Identifier | [ Expression ] }
        TypeDeclaration : type Identifier is Type
            Type : PrimitiveType | UserType | Identifier
                PrimitiveType : integer | real | boolean
                UserType : ArrayType | RecordType
                    ArrayType : array '[' [ Expression ] ']' Type
                    RecordType : record { VariableDeclaration } end

    RoutineDeclaration : routine Identifier ( Parameters ) [ : Type ] is Body end
        Body : { SimpleDeclaration | Statement }
            Statement : Assignment | RoutineCall | WhileLoop | ForLoop | ForeachLoop | IfStatement
                Assignment : ModifiablePrimary := Expression
                RoutineCall : Identifier [ ( Expression { , Expression } ) ]
                WhileLoop : while Expression loop Body end
                ForLoop : for Identifier Range loop Body end
                ForeachLoop : foreach Identifier from ModifiablePrimary loop Body end
                IfStatement : if Expression then Body [ else Body ] end


Not Documented but should be done:
    Comments, I/O