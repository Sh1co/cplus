%skeleton "lalr1.cc"
%require "3.0"

%define api.value.type variant
%define api.token.constructor
%define parse.assert

%defines
%define api.parser.class { parser }
%define api.namespace { cplus }


%code requires
{
    #pragma once
    #include <iostream>
    #include <string>
    
    using namespace std;

    namespace cplus
    {
        class lexer;
    }
}

%code top
{
    static cplus::parser::symbol_type yylex(cplus::lexer &lexer) {
        return lexer.get_next_token();
    }
    using namespace cplus;
}

%lex-param { cplus::lexer &lexer }
%parse-param { cplus::lexer &lexer }

%token VAR ID IS INT REAL BOOLEAN
%token END 0 "end of file"

%type <std::string> ID

%start Program

%%

Program:  | SimpleDeclaration
SimpleDeclaration: VariableDeclaration
VariableDeclaration:
    VAR ID IS INT { std::cout << "[Parsed] integer variable " << $2 << "\n"; }
    | VAR ID IS REAL { std::cout << "[Parsed] real variable " << $2 << "\n"; }
    | VAR ID IS BOOLEAN { std::cout << "[Parsed] boolean variable " << $2 << "\n"; }

;

%%
namespace yy
{
    void parser::error(const std::string& msg)
    {
        std::cout<< "syntax error!\n";
    }
}
